@import "fs-tools";

:root {
  --col-rem: 0rem;
}

* {
  margin: 0;
  padding: 0;
  list-style-type: none;
  text-decoration: none;
  outline: none 0;
  -webkit-tap-highlight-color: transparent;
  @include touch-action(manipulation);
  font-family: "Source Sans Pro", -apple-system, BlinkMacSystemFont, "Segoe UI",
  Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
  font-weight: normal;
  border: none;
  background: none;
  @include border-box;
  line-height: 1.15;

  &, &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button,
  &::-webkit-search-cancel-button,
  &::-webkit-search-results-button {
    -webkit-appearance: none;
    -moz-appearance: textfield;
  }
}

@mixin color-map($colors, $class) {
  @each $name, $color in $colors {
    .bg-#{$class}-#{$name} {
      &, &.btn {
        background: $color;
      }

      &.btn {
        &:focus {
          @include boxShadow(0 0 0 .2rem rgba($color, .5));
        }
      }
    }
    @include media(bg-#{$class}-#{$name}) {
      &, &.btn {
        background: $color;
      }

      &.btn {
        &:focus {
          @include boxShadow(0 0 0 .2rem rgba($color, .5));
        }
      }
    }
  }
  @each $name, $color in $colors {
    .text-#{$class}-#{$name} {
      color: $color;
    }
    @include media(text-#{$class}-#{$name}) {
      color: $color;
    }
  }
}

@include color-map($blue-gray-color, blue-gray);
@include color-map($cool-gray-color, cool-gray);
@include color-map($gray-color, gray);
@include color-map($true-gray-color, true-gray);
@include color-map($warm-gray-color, warm-gray);
@include color-map($red-color, red);
@include color-map($orange-color, orange);
@include color-map($amber-color, amber);
@include color-map($yellow-color, yellow);
@include color-map($lime-color, lime);
@include color-map($green-color, green);
@include color-map($emerald-color, emerald);
@include color-map($teal-color, emerald);
@include color-map($cyan-color, emerald);
@include color-map($sky-color, emerald);
@include color-map($blue-color, emerald);
@include color-map($indigo-color, emerald);
@include color-map($violet-color, emerald);
@include color-map($purple-color, emerald);
@include color-map($fuchsia-color, emerald);
@include color-map($pink-color, emerald);
@include color-map($rose-color, emerald);
$color-map: (none: none, primary: $primary, black: $black, white: $white,
        dark: $dark, secondary: $secondary, light: $light,
        success: $success, info: $info, danger: $danger, warning: $warning);
@each $name, $color in $color-map {
  .bg-#{$name} {
    background: $color !important;
  }
}

.form-control {
  padding: .75rem;
  background: $white;
  @include borderRadius(.25rem);
  @include boxShadow(0 0 0 1px $secondary);
  @include transition(box-shadow $transition-fast);
  resize: none;
}

$position-map: relative, absolute, fixed, sticky;
@each $pos in $position-map {
  .#{$pos} {
    position: $pos;
  }
}

$text-map: center, left, right;
@each $text in $text-map {
  .t-#{$text} {
    text-align: $text;
  }
}

$gap-map: (column: x, row: y);
@each $name, $gap in $gap-map {
  $c: 0;
  @for $i from 0 through 4 {
    .gap-#{$gap}-#{$i} {
      #{$name}-gap: #{$c}rem;
      --col-rem: #{$c}rem;
    }
    $c: $c + .25;
  }
}

.o-hidden {
  overflow: hidden;
}

.o-auto {
  overflow: auto;
}

$o-x-map: hidden, auto;
@each $o in $o-x-map {
  .o-x-#{$o} {
    overflow-x: $o;
  }
}

$o-y-map: hidden, auto;
@each $o in $o-y-map {
  .o-y-#{$o} {
    overflow-y: $o;
  }
}

$margin-map: (mx: x, my: y, ml: l, mr: r, mt: t, mb: b);
@each $n, $margin in $margin-map {
  $c: 0;
  @for $i from 0 through 4 {
    .#{$n}-auto {
      @include margin(auto, $margin)
    }
    @include media(#{$n}-#{$i}) {
      @include margin(auto, $margin)
    }
    .#{$n}-#{$i} {
      @include margin(#{$c}rem, $margin);
    }
    @include media(#{$n}-#{$i}) {
      @include margin(#{$c}rem, $margin);
    }
    $c: $c + .25;
  }
}

$space-map: (jc-column: column, jc-between: space-between,
        jc-around: space-around, jc-evenly: evenly, jc-start: flex-start,
        jc-end: end, jc-center: center);
@each $n, $s in $space-map {
  .#{$n} {
    justify-content: $s;
  }
}

$space-map: (ai-column: column, ai-start: flex-start,
        ai-end: end, ai-center: center);
@each $n, $s in $space-map {
  .#{$n} {
    align-items: $s;
  }
}

$padding-map: (px: x, py: y, pl: l, pr: r, pt: t, pb: b, p: xy);
@each $n, $padding in $padding-map {
  $c: 0;
  @for $i from 0 through 4 {
    .#{$n}-#{$i} {
      @include padding(#{$c}rem !important, $padding);
    }
    @include media(#{$n}-#{$i}) {
      @include padding(#{$c}rem !important, $padding);
    }
    $c: $c + .25;
  }
}

@mixin position-map($from, $to, $class, $style) {
  $count: 0;
  @for $i from $from through $to {
    $className: #{$class}-#{$i};
    @if $i != 0 {
      .#{$className} {
        #{$style}: #{$count}rem;
      }
    } @else {
      .#{$className} {
        #{$style}: $count;
      }
    }
    @include media($className) {
      @if $i != 0 {
        #{$style}: #{$count}rem;
      } @else {
        #{$style}: $count;
      }
    }
    $count: $count + .25;
  }
}

.f-control {
  padding: .75rem;
  @include transition-fast;
  @include borderRadius(.25rem);
  background: $white;
  border: 1px solid $secondary;

  &:focus {
    border-color: $primary;
    @include boxShadow(0 0 0 .2rem rgba($primary, .5));
  }
}

.shadow-none {
  @include boxShadow(none);
}

.shadow-sm {
  @include shadowSm;
}

.shadow-md {
  @include shadowMd;
}

.shadow-lg {
  @include shadowLg;
}

.shadow-xl {
  @include shadowXl;
}

.shadow-xxl {
  @include shadowXxl;
}

@include position-map(0, 4, t, top);
@include position-map(0, 4, b, bottom);
@include position-map(0, 4, r, right);
@include position-map(0, 4, l, left);
$round-count: 0;
@for $i from 0 through 4 {
  @if $i == 0 {
    .round-#{$i} {
      @include borderRadius(#{$round-count});
    }
  } @else {
    .round-#{$i} {
      @include borderRadius(#{$round-count}rem);
    }
  }
  $round-count: $round-count + .25;
}

.col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 calc(#{$i} / 12 * 100% - var(--col-rem));
    max-width: calc(#{$i} / 12 * 100% - var(--col-rem));
  }
  @include media(col-#{$i}) {
    flex: 0 0 calc(#{$i} / 12 * 100% - var(--col-rem));
    max-width: calc(#{$i} / 12 * 100% - var(--col-rem));
  }
}

.container {
  width: 100%;
  @include margin(auto, x);
  @include padding(1rem, x);

  @each $n, $m in $media {
    @media (min-width: #{$m}px) {
      & {
        max-width: #{$m - 18}px;
      }
    }
  }
}

.card {
  position: relative;
  background: $white;
  @include boxShadow((0 0 1px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.2)));

  .card-image {
    &:not(&.default) {
      width: 100%;
      height: 200px;
      @include object-fit(cover);
    }
  }

  .card-header {
    @include borderRadius(.25rem 0.25rem 0 0);
    padding: .75rem 1.25rem;
    border-bottom: 1px solid rgba(0, 0, 0, .125);
  }

  .card-body {
    padding: 1.25rem;
  }

  .card-footer {
    border-top: 1px solid rgba(0, 0, 0, .125);
    padding: .75rem 1.25rem;
  }
}

.row {
  display: flex;
  flex-wrap: wrap;
  @include margin(1rem, x);
}

@each $name, $m in $media {
  @include media-only($m, $name, row) {
    display: flex;
    flex-wrap: wrap;
    @include margin(1rem, x);
  }
}

$object-fit: cover, contain;
@each $fit in $object-fit {
  .#{$fit} {
    @include object-fit($fit);
  }
}

$display: none, flex, grid, none, inline, block, inline-block;
@each $d in $display {
  .d-#{$d} {
    display: $d;
  }

  @each $name, $m in $media {
    @include media-only($m, $name, d-#{$d}) {
      display: $d;
    }
  }
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  background: rgba(0, 0, 0, .75);
  z-index: 7;
  @include transition-medium;
  opacity: 0;
  overflow: hidden;
  overflow-y: auto;
  @include padding(y, 2rem);
  display: none;

  &.show {
    opacity: 1;
  }

  &.center {
    display: flex !important;
    align-items: center;
    justify-content: center;
  }

  .card {
    min-width: 20rem;
  }
}

$fd: column, column-reverse, row, row-reverse;
@each $fn in $fd {
  .fd-#{$fn} {
    -ms-flex-direction: $fn;
    -webkit-flex-direction: $fn;
    flex-direction: $fn;
  }
  @each $name, $m in $media {
    @include media-only($m, $name, $fn) {
      -ms-flex-direction: $fn;
      -webkit-flex-direction: $fn;
      flex-direction: $fn;
    }
  }
}

.btn {
  @include btn;

  &.ripple {
    position: relative;
    overflow: hidden;

    *:not(.ripple) {
      pointer-events: none;
    }

    &.ripple {
      position: absolute;
      @include transform(translate(-50%, -50%));
      background: radial-gradient(rgba($white, .5), transparent);
      pointer-events: none;
      @include borderRadius(50%);
      animation: ripple $transition-slow;
      @keyframes ripple {
        0% {
          @include size(0);
          opacity: .7;
        }
        100% {
          opacity: 0;
          @include size(var(--size));
        }
      }
    }
  }
}